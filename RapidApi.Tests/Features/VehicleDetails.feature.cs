// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RapidApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MockAPITestFeature : Xunit.IClassFixture<MockAPITestFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VehicleDetails.feature"
#line hidden
        
        public MockAPITestFeature(MockAPITestFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MockAPITest", "\tI should be able to GET vehicle details from registration", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Vehicle details GET")]
        [Xunit.TraitAttribute("FeatureTitle", "MockAPITest")]
        [Xunit.TraitAttribute("Description", "Vehicle details GET")]
        [Xunit.TraitAttribute("Category", "MockAPITest")]
        public virtual void VehicleDetailsGET()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vehicle details GET", null, new string[] {
                        "MockAPITest"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestName",
                        "Application",
                        "Authorization",
                        "Method",
                        "Parameter",
                        "ContentType",
                        "Client_ID",
                        "Client_Secret"});
            table5.AddRow(new string[] {
                        "VehicleDetailsTest1",
                        "vehicle",
                        "Basic",
                        "GET",
                        "KW55DFM",
                        "application/json;charset=utf-8",
                        "a934bnj3n45ou5i7nln443b54b",
                        "kjihi56b1212vghc35b34kb45k"});
            table5.AddRow(new string[] {
                        "VehicleDetailsTest2",
                        "vehicle",
                        "Basic",
                        "GET",
                        "",
                        "application/json;charset=utf-8",
                        "a934bnj3n45ou5i7nln443b54b",
                        "kjihi56b1212vghc35b34kb45k"});
            table5.AddRow(new string[] {
                        "VehicleDetailsTest3",
                        "vehicle",
                        "Basic",
                        "DELETE",
                        "KW55DFM",
                        "application/json;charset=utf-8",
                        "a934bnj3n45ou5i7nln443b54b",
                        "kjihi56b1212vghc35b34kb45k"});
#line 6
 testRunner.When("I GET vehicle details", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestName",
                        "MaxResponseTime"});
            table6.AddRow(new string[] {
                        "VehicleDetailsTest1",
                        "5000"});
            table6.AddRow(new string[] {
                        "VehicleDetailsTest2",
                        "5000"});
            table6.AddRow(new string[] {
                        "VehicleDetailsTest3",
                        "5000"});
#line 11
 testRunner.Then("verify response time", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "TestName",
                        "StatusCode"});
            table7.AddRow(new string[] {
                        "VehicleDetailsTest1",
                        "200"});
            table7.AddRow(new string[] {
                        "VehicleDetailsTest2",
                        "404"});
            table7.AddRow(new string[] {
                        "VehicleDetailsTest3",
                        "405"});
#line 16
 testRunner.And("verify response code", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MockAPITestFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MockAPITestFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
