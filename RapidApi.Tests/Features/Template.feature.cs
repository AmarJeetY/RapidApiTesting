// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RapidApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TemplateFeatureForTestingRestAPIsFeature : Xunit.IClassFixture<TemplateFeatureForTestingRestAPIsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Template.feature"
#line hidden
        
        public TemplateFeatureForTestingRestAPIsFeature(TemplateFeatureForTestingRestAPIsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Template feature for testing Rest APIs", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Test Simple API Post request")]
        [Xunit.TraitAttribute("FeatureTitle", "Template feature for testing Rest APIs")]
        [Xunit.TraitAttribute("Description", "Test Simple API Post request")]
        [Xunit.TraitAttribute("Category", "LocalJsonServerPost")]
        public virtual void TestSimpleAPIPostRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Simple API Post request", null, new string[] {
                        "LocalJsonServerPost"});
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Title",
                        "CreateTestPost"});
            table1.AddRow(new string[] {
                        "Author",
                        "Tester1"});
#line 13
 testRunner.When("I create a new blog post:", ((string)(null)), table1, "When ");
#line 17
 testRunner.Then("the \'Post\' response should be received in 5000 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("the \'Post\' response status code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test Simple API Get request")]
        [Xunit.TraitAttribute("FeatureTitle", "Template feature for testing Rest APIs")]
        [Xunit.TraitAttribute("Description", "Test Simple API Get request")]
        [Xunit.TraitAttribute("Category", "LocalJsonServerGet")]
        public virtual void TestSimpleAPIGetRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Simple API Get request", null, new string[] {
                        "LocalJsonServerGet"});
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Title",
                        "GetTestPost"});
            table2.AddRow(new string[] {
                        "Author",
                        "Tester2"});
#line 22
 testRunner.Given("I have created a new blog post:", ((string)(null)), table2, "Given ");
#line 26
 testRunner.When("I get the created blog post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Title",
                        "GetTestPost"});
            table3.AddRow(new string[] {
                        "Author",
                        "Tester2"});
#line 27
 testRunner.Then("the result should be:", ((string)(null)), table3, "Then ");
#line 31
 testRunner.And("the \'Get\' response should be received in 5000 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("the \'Get\' response status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test Simple API Delete request")]
        [Xunit.TraitAttribute("FeatureTitle", "Template feature for testing Rest APIs")]
        [Xunit.TraitAttribute("Description", "Test Simple API Delete request")]
        [Xunit.TraitAttribute("Category", "LocalJsonServerDelete")]
        public virtual void TestSimpleAPIDeleteRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Simple API Delete request", null, new string[] {
                        "LocalJsonServerDelete"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Title",
                        "DeleteTestPost"});
            table4.AddRow(new string[] {
                        "Author",
                        "Tester3"});
#line 36
 testRunner.Given("I have created a new blog post:", ((string)(null)), table4, "Given ");
#line 40
 testRunner.When("I delete the created blog post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the \'Delete\' response should be received in 5000 milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.And("the \'Delete\' response status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Test simple Get with Oauth")]
        [Xunit.TraitAttribute("FeatureTitle", "Template feature for testing Rest APIs")]
        [Xunit.TraitAttribute("Description", "Test simple Get with Oauth")]
        public virtual void TestSimpleGetWithOauth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test simple Get with Oauth", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 45
 testRunner.Given("I have authenticated with the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.When("I get a blog post from an authorised endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the \'Get\' response status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TemplateFeatureForTestingRestAPIsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TemplateFeatureForTestingRestAPIsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
